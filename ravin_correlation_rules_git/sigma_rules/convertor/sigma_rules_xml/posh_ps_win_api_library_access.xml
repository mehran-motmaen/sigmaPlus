<?xml version="1.0" encoding="UTF-8" ?><root><title type="str">WinAPI Function Calls Via PowerShell Scripts</title><id type="str">9f22ccd5-a435-453b-af96-bf99cbb594d4</id><related type="list"><item type="dict"><id type="str">ba3f5c1b-6272-4119-9dbd-0bc8d21c2702</id><type type="str">similar</type></item><item type="dict"><id type="str">03d83090-8cba-44a0-b02f-0b756a050306</id><type type="str">similar</type></item><item type="dict"><id type="str">19d65a1c-8540-4140-8062-8eb00db0bba5</id><type type="str">similar</type></item></related><status type="str">experimental</status><description type="str">Detects calls to WinAPI functions from PowerShell scripts. Attackers can often leverage these APIs to avoid detection based on typical PowerShell function calls. Use this rule as a basis to hunt for interesting scripts.</description><references type="list"><item type="str">https://speakerdeck.com/heirhabarov/hunting-for-powershell-abuse</item></references><author type="str">Nikita Nazarov, oscd.community, Nasreddine Bencherchali (Nextron Systems)</author><date type="str">2023/07/21</date><tags type="list"><item type="str">attack.execution</item><item type="str">attack.t1059.001</item><item type="str">attack.t1106</item><item type="str">detection.threat_hunting</item></tags><logsource type="dict"><product type="str">windows</product><category type="str">ps_script</category><definition type="str">Requirements: Script Block Logging must be enabled</definition></logsource><detection type="dict"><selection type="dict"><key name="ScriptBlockText|contains" type="list"><item type="str">AddSecurityPackage</item><item type="str">AdjustTokenPrivileges</item><item type="str">CloseHandle</item><item type="str">CreateProcessWithToken</item><item type="str">CreateRemoteThread</item><item type="str">CreateThread</item><item type="str">CreateUserThread</item><item type="str">DangerousGetHandle</item><item type="str">DuplicateTokenEx</item><item type="str">EnumerateSecurityPackages</item><item type="str">FreeLibrary</item><item type="str">GetDelegateForFunctionPointer</item><item type="str">GetLogonSessionData</item><item type="str">GetModuleHandle</item><item type="str">GetProcAddress</item><item type="str">GetProcessHandle</item><item type="str">GetTokenInformation</item><item type="str">ImpersonateLoggedOnUser</item><item type="str">LoadLibrary</item><item type="str">memcpy</item><item type="str">MiniDumpWriteDump</item><item type="str">OpenDesktop</item><item type="str">OpenProcess</item><item type="str">OpenProcessToken</item><item type="str">OpenThreadToken</item><item type="str">OpenWindowStation</item><item type="str">QueueUserApc</item><item type="str">ReadProcessMemory</item><item type="str">RevertToSelf</item><item type="str">RtlCreateUserThread</item><item type="str">SetThreadToken</item><item type="str">VirtualAlloc</item><item type="str">VirtualFree</item><item type="str">VirtualProtect</item><item type="str">WaitForSingleObject</item><item type="str">WriteInt32</item><item type="str">WriteProcessMemory</item><item type="str">ZeroFreeGlobalAllocUnicode</item></key></selection><condition type="str">selection</condition></detection><falsepositives type="list"><item type="str">This rule is mainly used for hunting and will generate quite a lot of false positives when applied in production. It&apos;s best combined with other fields such as the path of execution, the parent process, etc.</item></falsepositives><level type="str">medium</level></root>