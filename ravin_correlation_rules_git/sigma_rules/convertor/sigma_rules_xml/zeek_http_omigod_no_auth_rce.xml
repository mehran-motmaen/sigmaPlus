<?xml version="1.0" encoding="UTF-8" ?><root><title type="str">OMIGOD HTTP No Authentication RCE</title><id type="str">ab6b1a39-a9ee-4ab4-b075-e83acf6e346b</id><status type="str">stable</status><description type="str">Detects the exploitation of OMIGOD (CVE-2021-38647) which allows remote execute (RCE) commands as root with just a single unauthenticated HTTP request.
Verify, successful, exploitation by viewing the HTTP client (request) body to see what was passed to the server (using PCAP).
Within the client body is where the code execution would occur. Additionally, check the endpoint logs to see if suspicious commands or activity occurred within the timeframe of this HTTP request.
</description><references type="list"><item type="str">https://www.wiz.io/blog/omigod-critical-vulnerabilities-in-omi-azure</item><item type="str">https://twitter.com/neu5ron/status/1438987292971053057?s=20</item></references><author type="str">Nate Guagenti (neu5ron)</author><date type="str">2021/09/20</date><modified type="str">2019/09/20</modified><tags type="list"><item type="str">attack.privilege_escalation</item><item type="str">attack.initial_access</item><item type="str">attack.execution</item><item type="str">attack.lateral_movement</item><item type="str">attack.t1068</item><item type="str">attack.t1190</item><item type="str">attack.t1203</item><item type="str">attack.t1021.006</item><item type="str">attack.t1210</item></tags><logsource type="dict"><product type="str">zeek</product><service type="str">http</service><definition type="str">Enable the builtin Zeek script that logs all HTTP header names by adding &quot;@load policy/protocols/http/header-names&quot; to your local.zeek config file. The script can be seen here for reference https://github.com/zeek/zeek/blob/d957f883df242ef159cfd846884e673addeea7a5/scripts/policy/protocols/http/header-names.zeek</definition></logsource><detection type="dict"><selection type="dict"><status_code type="int">200</status_code><uri type="str">/wsman</uri><method type="str">POST</method></selection><auth_header type="dict"><key name="client_header_names|contains" type="str">AUTHORIZATION</key></auth_header><too_small_http_client_body type="dict"><request_body_len type="int">0</request_body_len></too_small_http_client_body><condition type="str">selection and not auth_header and not too_small_http_client_body</condition></detection><fields type="list"><item type="str">id.orig_h</item><item type="str">id.resp_h</item><item type="str">id.resp_p</item><item type="str">status_code</item><item type="str">method</item><item type="str">uri</item><item type="str">request_body_len</item><item type="str">response_body_len</item><item type="str">user_agent</item></fields><falsepositives type="list"><item type="str">Exploits that were attempted but unsuccessful.</item><item type="str">Scanning attempts with the abnormal use of the HTTP POST method with no indication of code execution within the HTTP Client (Request) body. An example would be vulnerability scanners trying to identify unpatched versions while not actually exploiting the vulnerability. See description for investigation tips.</item></falsepositives><level type="str">high</level></root>